<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vue]]></title>
    <url>%2F2019%2F03%2F28%2Fvue%2F</url>
    <content type="text"></content>
      <categories>
        <category>vue.js</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git clone提示(fatal:Could not read from remote repository)]]></title>
    <url>%2F2019%2F03%2F20%2Fgit%E6%97%A0%E6%B3%95clone%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[情绪成熟的人，不会在爱中堕落，而是在爱中成长，于是爱也在他心中长成。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——卡尔·曼宁格 有没有经历过这种绝望，开发过程中电脑突然凉了，经过好多天的检测，尝试维修，最终确定电脑确实凉了。我就经历过。于是换新电脑，安装git客户端，重新clone代码，发现一直报错，clone不下来，好气啊有木有，但还是要保持微笑，我的解决办法如下： 1、如果你能访问远程仓库地址 执行命令 $ ssh-keygen -t rsa -C &quot;你的邮箱地址&quot; 然后一直回车就行了，成功后会在你的主目录下生成一个.ssh文件夹，不过这个是隐藏文件，进入主目录，使用command+shift+.快捷键打开隐藏文件，进入.ssh文件夹会看到id_rsa私钥和id_rsa.pub公钥，最后打开id_rsa.pub公钥文件复制里面的内容，访问远程仓库地址，进入setting选项，添加SSH公钥，然后重新clone代码即可。 2、如果你只有一个git仓库clone地址，无法访问远程仓库地址 执行命令 $ ssh-keygen Enter file in which to save the key (“当前所在路径”): “给文件起个名字” 这里随便起一个名字，这样问题就出来了，你起的这个名字没有和ssh内设定的名字保持一致，所以使用命令 $ ssh -T git@github.com 会报出Permission denied (publickey).这个错误。 这时候可以通过给文件起名字的时候用id_rsa这个.ssh内设名字解决。 也可以通过执行命令 $ ssh-add ~/.ssh/你的名字 将自己的名字加入到.ssh中之后，再执行命令 $ ssh -T git@github.com 解决。然后clone代码，你最期待的画面出现了。 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[swift基础知识]]></title>
    <url>%2F2018%2F09%2F25%2Fswift%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[fastlane+蒲公英自动化打包]]></title>
    <url>%2F2018%2F09%2F14%2Ffastlane-%E8%92%B2%E5%85%AC%E8%8B%B1%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%2F</url>
    <content type="text"><![CDATA[人类似乎有这样的倾向，建立一项规则叫别人遵守，同时又极力使自己成为例外，不受它的约束。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——卢梭《忏悔录》 本文参考自动化打包之fastlane 作者写的特别详细，之前自己装这个，执行到安装蒲公英插件，总是报下面的错误 123An error occurred while installing unf_ext (0.0.7.5), and Bundlercannot continue.Make sure that `gem install unf_ext -v &apos;0.0.7.5&apos;` succeeds before bundling. 后来看到这篇博客，一次性成功，中间没遇到什么很难解决的问题，直到最后打包成功。很丝滑很流畅。再次感谢。 1、安装rvmRVM 是一个命令行工具,可以提供一个便捷的多版本 Ruby 环境的管理和切换。 执行命令rvm -v，查看是否已经安装了rvm 12$ rvm -v-bash: rvm: command not found 执行命令安装rvm： 123$ curl -L https://get.rvm.io | bash -s stable$ source ~/.bashrc$ source ~/.bash_profile 再次执行命令rvm -v 12$ rvm -vrvm 1.29.4 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io] mac自带ruby，也可以自己安装，使用rvm查看ruby的版本 执行命令： 123456789101112131415161718192021$ rvm list known# MRI Rubies[ruby-]1.8.6[-p420][ruby-]1.8.7[-head] # security released on head[ruby-]1.9.1[-p431][ruby-]1.9.2[-p330][ruby-]1.9.3[-p551][ruby-]2.0.0[-p648][ruby-]2.1[.10][ruby-]2.2[.10][ruby-]2.3[.7][ruby-]2.4[.4][ruby-]2.5[.1][ruby-]2.6[.0-preview2]ruby-head# for forks use: rvm install ruby-head-&lt;name&gt; --url https://github.com/github/ruby.git --branch 2.2..省略好多行. 2、brew123456$ brew update # 更新 Homebrew 的信息$ brew outdated # 看一下哪些软件可以升级$ brew upgrade &lt;xxx&gt; # 如果不是所有的都要升级，那就这样升级指定的$ brew upgrade; #全部升级$ brew cleanup # 如果都要升级，直接升级完然后清理干净 执行命令： 12345678910111213$ brew updatefatal: unable to access &apos;https://github.com/Homebrew/homebrew-cask/&apos;: LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54Error: Fetching /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask failed!Updated 1 tap (homebrew/core).==&gt; New Formulaepicat==&gt; Updated Formulaebat glm rusterlang libiscsi stlinkfreexl opensc swift-protobufgit-cola php@7.1 webpackgit-credential-manager root 报错，别慌，可能是网络问题，多执行几遍就好了，我执行了两次输出以下结果 12Updated 1 tap (homebrew/cask).No changes to formulae. 执行命令： 123456789$ brew outdatedack (2.14) &lt; 2.24automake (1.15, 1.15.1) &lt; 1.16.1_1go (1.9.2) &lt; 1.11libgpg-error (1.24, 1.27) &lt; 1.32libyaml (0.1.6_1, 0.1.7) &lt; 0.2.1openssl (1.0.2h_1, 1.0.2n) &lt; 1.0.2preadline (6.3.8, 7.0.3_1) &lt; 7.0.5 执行命令： 123456789$ brew upgradeError: The following directories are not writable by your user:/usr/local/share/man/man3/usr/local/share/man/man5/usr/local/share/man/man7You should change the ownership of these directories to your user. sudo chown -R $(whoami) /usr/local/share/man/man3 /usr/local/share/man/man5 /usr/local/share/man/man7 报错了，按照提示，执行命令： 1$ sudo chown -R $(whoami) /usr/local/share/man/man3 /usr/local/share/man/man5 /usr/local/share/man/man7 3、bundler执行命令： 12345$ gem install bundlerFetching: bundler-1.16.4.gem (100%)ERROR: While executing gem ... (Errno::EACCES) Permission denied @ rb_sysopen - /Library/Ruby/Gems/2.3.0/cache/bundler-1.16.4.gem 没有权限，执行命令： 1$ sudo gem install bundler 输入密码，完成安装。 4、fastlane执行命令： 1$ xcode-select --install 会弹出一个弹窗，安装即可。 执行命令： 1$ sudo gem install fastlane --verbose 5、match执行命令： 1$ sudo gem install match 安装成功以后会提示使用fastlane match代替match 6、deliver上传屏幕截图,元数据,和APP到AppStore 执行命令： 1$ sudo gem install deliver 安装成功以后会提示使用fastlane deliver代替deliver 7、初始化fastlanea：打开项目，导航栏-&gt;product-&gt;scheme-&gt;manage schemes…选择你的项目，勾选shared b：在终端中，cd到你的项目目录，执行命令： 123456789101112131415$ fastlane init[11:37:59]: Created new folder &apos;./fastlane&apos;.[11:37:59]: Detected an iOS/macOS project in the current directory: &apos;wasaiSports.xcworkspace&apos;[11:37:59]: -----------------------------[11:37:59]: --- Welcome to fastlane 🚀 ---[11:37:59]: -----------------------------[11:37:59]: fastlane can help you with all kinds of automation for your mobile app[11:37:59]: We recommend automating one task first, and then gradually automating more over time[11:37:59]: What would you like to use fastlane for?1. 📸 Automate screenshots2. 👩‍✈️ Automate beta distribution to TestFlight3. 🚀 Automate App Store distribution4. 🛠 Manual setup - manually setup your project to automate your tasks? 3 有4个选项，先选3，上传到App Store 1234567891011..省略很多.[11:38:17]: - Manage your App Store Connect app metadata and screenshots[11:38:17]: [11:38:17]: Your Apple ID credentials will only be stored in your Keychain, on your local machine[11:38:17]: For more information, check out[11:38:17]: https://github.com/fastlane/fastlane/tree/master/credentials_manager[11:38:17]: [11:38:17]: Please enter your Apple ID developer credentials[11:38:17]: Apple ID Username: 输入你的开发者账号邮箱，如果有多个team的话，选择自己的team序号，然后 12345[11:39:11]: This way, you&apos;ll be able to edit your app&apos;s metadata in local `.txt` files.[11:39:11]: After editing the local `.txt` files, just run fastlane and all changes will be pushed up.[11:39:11]: If you don&apos;t want to use this feature, you can still use fastlane to upload and distribute new builds to the App Store[11:39:11]: Would you like fastlane to manage your app&apos;s metadata? (y/n)y 是否允许fastlane管理app的数据信息，输入y，我分别在两台电脑上走到这个过程遇到了两种不同的情况： ◆ 第一次直接成功了，但是在项目文件目录下没有生成Gemfile.lock文件，其他都有，然后我就斗胆执行了命令$ bundle update，执行成功后就有了Gemfile.lock这个文件。 ◆ 第二次卡在了$ bundle update这一行，这个不是我手动输入的命令，而是上面输入y之后输出的，然后我又斗胆终止了，按ctrl + c还终止不了，重新打开一个窗口，cd到项目目录，执行命令$ bundle update，很快的就成功了。 以上是我遇到的两种情况，到此为止，fastlane init就成功了，此时你的项目目录下会出现fastlane文件夹、Gemfiel、Gemfile.lock这三项。 8、插件☞ 安装蒲公英pgyer插件 ☜，当然有很多插件可以选择，本篇以蒲公英为例，执行命令： 1$ bundle exec fastlane add_plugin pgyer ☞ 安装版本控制versioning插件 ☜，执行命令： 1$ bundle exec fastlane add_plugin versioning 还有很多插件，可以参考fastlane官方文档可以找到的插件 9、打包在Fastfile中增加上传到蒲公英的lane 1234lane :beta do build_app(export_method: &quot;ad-hoc&quot;) pgyer(api_key: &quot;******&quot;, user_key: &quot;******&quot;) end 其中api_key和user_key的获取方法：登录你的蒲公英账号（提前先上传一个版本），在应用概述里面找到这两个值。 执行命令： 1$ fastlane beta 成功后，如果你的蒲公英绑定了微信或手机，就会收到相应的信息通知。 10、后续问题如果pod不能用了，cd到项目目录，执行下列命令： 123456789$ mkdir -p $HOME/Software/ruby$ export GEM_HOME=$HOME/Software/ruby$ gem install cocoapods$ export PATH=$PATH:$HOME/Software/ruby/bin$ pod --version 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>自动化打包</category>
      </categories>
      <tags>
        <tag>fastlane自动化打包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac下搭建hyperledger Fabric环境]]></title>
    <url>%2F2018%2F09%2F06%2FFabric%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[童年，我们总以为什么都不懂；少年，我们总以为自己什么都懂；青年，我们又以为什么都不懂；中年，我们又以为什么都懂；老年，其实我们什么都不懂。此人生五境界论，揭示了人生的秘密：我们在生活面前，永远都是无知的孩子。 ubuntu参考区块链之Hyperledger（超级账本）Fabric v1.0 的环境搭建（超详细教程） 本人是mac OS 系统，参考Mac下Hyperledger Fabric(超级账本)环境搭建,这篇文章作者已经写的很详细了，但是在操作过程中我还是遇到了困难，搞了很久，最后在朋友的帮助下得以解决，所以在此记录下来，以方便遇到同样问题的朋友参考。 1、前提条件1.1 安装 GoMac 可以直接通过 homebrew 安装 go 环境 1brew install go 或者通过官网下载安装包传送门 安装完成后检测是否安装成功 12$ go versiongo version go1.11 darwin/amd64 1.2 配置环境变量a: 新建一个go的文件夹，路径放在$HOME下： 12$ cd $HOME //进入 $HOME 目录下 $ mkdir go //新建 go 文件夹 b: 配置环境变量 12$ cd $HOME //进入 $HOME 目录下 $ vi .bash_profile //编辑 .bash_profile 文件 输入 i ,然后在文件末尾加上： 123456#GOPATHexport GOPATH=$HOME/go#GOBINexport GOBIN=$GOPATH/binexport PATH=$PATH:$GOBIN 按下 esc 键，输入 :wq 保存后退出，执行 source 命令，使之生效： 1$ source .bash_profile c: 通过 go env 检查： 123456789101112131415$ go env#输出结果GOARCH=&quot;amd64&quot;GOBIN=&quot;/Users/wasai/go/bin&quot;GOCACHE=&quot;/Users/wasai/Library/Caches/go-build&quot;GOEXE=&quot;&quot;GOFLAGS=&quot;&quot;GOHOSTARCH=&quot;amd64&quot;GOHOSTOS=&quot;darwin&quot;GOOS=&quot;darwin&quot;GOPATH=&quot;/Users/wasai/go&quot;. .此处截取一部分，省略很多. 1.3 安装Docker并更新镜像源a 安装Docker和docker-compose 在官网下载Docker CE for Mac（需要注册dockerId才能下载），完成后安装。 安装后检查docker和docker-compose是否安装成功 1234$ docker --versionDocker version 18.06.1-ce, build e68fc7a$ docker-compose --versiondocker-compose version 1.22.0, build f46880f b 更新镜像源 打开刚刚安装的Docker软件，点击导航栏上的Docker图标-&gt;Preference-&gt;Daemon,在Registry mirrors中加入https://aic2v8yz.mirror.aliyuncs.com ps：这里使用上述参考文章作者的加速器,如果你自己有也可以用自己的加速器 完成之后，最后确保docker的状态是Docker is running并且在运行Hyperledger的时候，Docker的状态也是Docker is running 2、下载Hyperledger Fabric项目源码为 fabric 创建项目路径： 12345$ cd $GOPATH $ mkdir -p src/github.com/hyperledger$ cd src/github.com/hyperledger$ pwd /Users/wasai/go/src/github.com/hyperledger 从git上拉取Hyperledger Fabric： 123$ git clone git@github.com:hyperledger/fabric.git$ lsfabric 进入项目文件夹，查看tag： 1234567891011121314151617181920212223$ cd fabric$ git tagbaseimage-v0.0.11v0.6.0-previewv0.6.1-previewv1.0.0v1.0.0-alphav1.0.0-alpha2v1.0.0-betav1.0.0-rc1v1.0.1v1.0.2v1.0.3v1.0.4v1.0.5v1.0.6v1.1.0v1.1.0-alphav1.1.0-previewv1.1.0-rc1v1.1.1v1.2.0v1.2.0-rc1 选择使用v1.0.0 1234$ git checkout v1.0.0$ git branch* (HEAD detached at v1.0.0) release-1.2 3、启动项目进入项目文件夹 1$ cd examples/e2e_cli 执行download-dockerimages.sh，程序将会通过docker拉取项目所需镜像, 为了统一版本，请指定拉取镜像的版本号: 12$ chmod +x download-dockerimages.sh$ ./download-dockerimages.sh -c x86_64-1.0.0 -f x86_64-1.0.0 镜像拉取完成： 1234567891011121314151617181920===&gt; List out hyperledger docker imageshyperledger/fabric-tools latest 0403fd1c72c7 14 months ago 1.32GBhyperledger/fabric-tools x86_64-1.0.0 0403fd1c72c7 14 months ago 1.32GBhyperledger/fabric-couchdb latest 2fbdbf3ab945 14 months ago 1.48GBhyperledger/fabric-couchdb x86_64-1.0.0 2fbdbf3ab945 14 months ago 1.48GBhyperledger/fabric-kafka latest dbd3f94de4b5 14 months ago 1.3GBhyperledger/fabric-kafka x86_64-1.0.0 dbd3f94de4b5 14 months ago 1.3GBhyperledger/fabric-zookeeper latest e545dbf1c6af 14 months ago 1.31GBhyperledger/fabric-zookeeper x86_64-1.0.0 e545dbf1c6af 14 months ago 1.31GBhyperledger/fabric-orderer latest e317ca5638ba 14 months ago 179MBhyperledger/fabric-orderer x86_64-1.0.0 e317ca5638ba 14 months ago 179MBhyperledger/fabric-peer latest 6830dcd7b9b5 14 months ago 182MBhyperledger/fabric-peer x86_64-1.0.0 6830dcd7b9b5 14 months ago 182MBhyperledger/fabric-javaenv latest 8948126f0935 14 months ago 1.42GBhyperledger/fabric-javaenv x86_64-1.0.0 8948126f0935 14 months ago 1.42GBhyperledger/fabric-ccenv latest 7182c260a5ca 14 months ago 1.29GBhyperledger/fabric-ccenv x86_64-1.0.0 7182c260a5ca 14 months ago 1.29GBhyperledger/fabric-ca latest a15c59ecda5b 14 months ago 238MBhyperledger/fabric-ca x86_64-1.0.0 a15c59ecda5b 14 months ago 238MBhyperledger/fabric-baseos x86_64-0.3.1 4b0cab202084 16 months ago 157MB 最后执行脚本 1$ ./network_setup.sh up &lt;channel-ID&gt; 如果没有channel-ID,默认为mychannel，执行命令： 1$ ./network_setup.sh up mychannel 我执行完这个命令失败了，出现以下结果： 123456789101112131415161718192021222324Error: Error endorsing chaincode: rpc error: code = Unknown desc = Error starting container: API error (404): &#123;&quot;message&quot;:&quot;network e2ecli_default not found&quot;&#125;Usage: peer chaincode instantiate [flags]Flags: -C, --channelID string The channel on which this command should be executed (default &quot;testchainid&quot;) -c, --ctor string Constructor message for the chaincode in JSON format (default &quot;&#123;&#125;&quot;) -E, --escc string The name of the endorsement system chaincode to be used for this chaincode -l, --lang string Language the chaincode is written in (default &quot;golang&quot;) -n, --name string Name of the chaincode -P, --policy string The endorsement policy associated to this chaincode -v, --version string Version of the chaincode specified in install/instantiate/upgrade commands -V, --vscc string The name of the verification system chaincode to be used for this chaincodeGlobal Flags: --cafile string Path to file containing PEM-encoded trusted certificate(s) for the ordering endpoint --logging-level string Default logging level and overrides, see core.yaml for full syntax -o, --orderer string Ordering service endpoint --test.coverprofile string Done (default &quot;coverage.cov&quot;) --tls Use TLS when communicating with the orderer endpoint!!!!!!!!!!!!!!! Chaincode instantiation on PEER2 on channel &apos;mychannel&apos; failed !!!!!!!!!!!!!!!!================== ERROR !!! FAILED to execute End-2-End Scenario ================== ctrl+c退出 解决办法： 找到本地文件夹进入项目：/fabric/examples/e2e_cli/base/peer-base.yaml，打开 peer-base.yaml文件 1234567891011121314151617181920212223242526# Copyright IBM Corp. All Rights Reserved.## SPDX-License-Identifier: Apache-2.0#version: &apos;2&apos;services: peer-base: image: hyperledger/fabric-peer environment: - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock # the following setting starts chaincode containers on the same # bridge network as the peers # https://docs.docker.com/compose/networking/ - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=e2ecli_default #- CORE_LOGGING_LEVEL=ERROR - CORE_LOGGING_LEVEL=DEBUG - CORE_PEER_TLS_ENABLED=true - CORE_PEER_GOSSIP_USELEADERELECTION=true - CORE_PEER_GOSSIP_ORGLEADER=false - CORE_PEER_PROFILE_ENABLED=true - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer command: peer node start 其中将- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=e2ecli_default改为- CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=e2e_cli_default 然后执行命令（如果不执行这个，会出现新的问题） 12# 在e2e_cli目录下$ ./network_setup.sh down 重新启动Docker（如果不重启，会出现新的问题） 再重新执行命令 1$ ./network_setup.sh up mychannel 成功后输出 12345678910===================== Query on PEER3 on channel &apos;mychannel&apos; is successful ========================================== All GOOD, End-2-End execution completed ===================== _____ _ _ ____ _____ ____ _____| ____| | \ | | | _ \ | ____| |___ \ | ____|| _| | \| | | | | | _____ | _| __) | | _|| |___ | |\ | | |_| | |_____| | |___ / __/ | |___|_____| |_| \_| |____/ |_____| |_____| |_____| ctrl+c退出 4、测试Fabric网络这里有官方提供的小例子，在官方例子中，channel名字是mychannel，链码的名字是mycc。首先进入CLI，然后重新打开一个命令行窗口，输入： 1$ docker exec -it cli bash 然后运行以下命令可以查询a账户的余额： 1peer chaincode query -C mychannel -n mycc -c &apos;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&apos; 输出 12345678910root@e484bcb8e6da:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer chaincode query -C mychannel -n mycc -c &apos;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&apos;2018-09-06 10:11:25.945 UTC [msp] GetLocalMSP -&gt; DEBU 001 Returning existing local MSP2018-09-06 10:11:25.945 UTC [msp] GetDefaultSigningIdentity -&gt; DEBU 002 Obtaining default signing identity2018-09-06 10:11:25.945 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 003 Using default escc2018-09-06 10:11:25.945 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 004 Using default vscc2018-09-06 10:11:25.945 UTC [msp/identity] Sign -&gt; DEBU 005 Sign: plaintext: 0A95070A6708031A0C08CDFAC3DC0510...6D7963631A0A0A0571756572790A0161 2018-09-06 10:11:25.946 UTC [msp/identity] Sign -&gt; DEBU 006 Sign: digest: A7714812CFA5315FB0649B429267ED7DDE45CD1C082A55D2C03A09F3ACF2DE72 Query Result: 902018-09-06 10:11:25.963 UTC [main] main -&gt; INFO 007 Exiting.....root@e484bcb8e6da:/opt/gopath/src/github.com/hyperledger/fabric/peer# Query Result: 90 结果余额90 下面可以进行转账invoke操作,a转给b 50： 1peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n mycc -c &apos;&#123;&quot;Args&quot;:[&quot;invoke&quot;,&quot;a&quot;,&quot;b&quot;,&quot;50&quot;]&#125;&apos; 现在转账完毕， 我们试一试再查询一下a账户的余额，重复之前的查询指令，结果为： 12345678910root@e484bcb8e6da:/opt/gopath/src/github.com/hyperledger/fabric/peer# peer chaincode query -C mychannel -n mycc -c &apos;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&apos;2018-09-06 10:14:42.158 UTC [msp] GetLocalMSP -&gt; DEBU 001 Returning existing local MSP2018-09-06 10:14:42.159 UTC [msp] GetDefaultSigningIdentity -&gt; DEBU 002 Obtaining default signing identity2018-09-06 10:14:42.159 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 003 Using default escc2018-09-06 10:14:42.160 UTC [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 004 Using default vscc2018-09-06 10:14:42.162 UTC [msp/identity] Sign -&gt; DEBU 005 Sign: plaintext: 0A94070A6608031A0B0892FCC3DC0510...6D7963631A0A0A0571756572790A0161 2018-09-06 10:14:42.162 UTC [msp/identity] Sign -&gt; DEBU 006 Sign: digest: C6521250C0ACBF25D2B862D61ADF60EEC64015A1362CB091E9C3D5DAC8C2AA43 Query Result: 402018-09-06 10:14:42.183 UTC [main] main -&gt; INFO 007 Exiting.....root@e484bcb8e6da:/opt/gopath/src/github.com/hyperledger/fabric/peer# Query Result: 40 结果剩余40了，正确。 最后，我们需要关闭Fabric，这里先使用exit命令退出cli容器。然后执行命令 1$ ./network_setup.sh down 搭建并且测试结束！ 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>Fabric环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Charts X轴放大时X轴下方的数据重复显示]]></title>
    <url>%2F2018%2F08%2F24%2FX%E8%BD%B4%E6%94%BE%E5%A4%A7%E6%97%B6X%E8%BD%B4%E4%B8%8B%E6%96%B9%E7%9A%84%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E6%98%BE%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[有人说，这是一个平庸的时代，一个物质的时代，一个愚乐的时代，一个缺乏大师的时代，可是，我们不能把什么过错都推给时代。一个人左右不了时代，却可以左右自己的脸——它可以不漂亮，却不可以没内容；他可以很丑，却不可以没个性。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——徐怀谦《酷的脸》 我在使用Charts时将X轴放大3.5倍后遇到一个问题，X轴数据重复显示，直接上图 解决方法：设置X轴的时候，设置一个属性xAxis.granularity = 1; 就ok了。 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Charts图表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cell.detailTextLabel不显示]]></title>
    <url>%2F2018%2F08%2F23%2Fcell-detailTextLabel%E4%B8%8D%E6%98%BE%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[时光荏苒，声明短暂，别将时间浪费在争吵、道歉、伤心和责备上。用时间去爱吧，哪怕只有一瞬间，也不要辜负。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——马克吐温 12345static NSString *cellId = @&quot;home_cellId&quot;;UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellId];if (cell == nil) &#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:cellId];&#125; 解决方法：UITableViewCellStyleDefault 替换为 UITableViewCellStyleSubtitle 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>UITableViewCell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS状态栏颜色]]></title>
    <url>%2F2018%2F08%2F07%2FiOS%E7%8A%B6%E6%80%81%E6%A0%8F%E9%A2%9C%E8%89%B2%2F</url>
    <content type="text"><![CDATA[人这种卑鄙的东西，什么都会习惯的。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——《罪与罚》 状态栏分为前后两部分： 121、前景部分：指的是显示电池、时间、wifi信号那部分；2、背景部分：指的是前景的背景部分； 一般情况下说的状态栏颜色都是指前景部分。 1、更改启动图上的状态栏颜色TARGETS -&gt; General -&gt; Deployment Info -&gt; Status Bar Style 12默认的黑色（UIStatusBarStyleDefault）白色（UIStatusBarStyleLightContent） 下面的 Hide status bar 勾选后可以隐藏启动图的状态栏，视图中的还显示。 如果在Info.plist里面设置Status bar style 效果是一样的。 2、统一设置app所有控制器view的状态栏颜色View controller-based status bar appearance 属性在Info.plist文件中，如果将该属性设为YES,则控制器对状态的设置优先级最高，可以在控制器中对状态栏颜色进行单独修改；如果设置为NO的话，则以启动图设置为准，即app内部所有控制器view上状态栏情景部分颜色和启动图上保持一致，但还可以通过UIApplication管理，iOS9 以后已经不建议使用UIApplication管理状态栏了。 3、单独设置某个控制器的状态栏颜色两种情况：1、该控制器带导航控制器； 2、该控制器不带导航控制器 不管哪种情况首先将View controller-based status bar appearance设为YES （不带导航控制器） 在该控制器内添加： 1234- (UIStatusBarStyle)preferredStatusBarStyle&#123; return UIStatusBarStyleLightContent;&#125; （带导航控制器） 在该控制器内添加： 1234- (UIStatusBarStyle)preferredStatusBarStyle&#123; return UIStatusBarStyleLightContent;&#125; 还不够，需要自定义navigationController，然后在里面重写方法： 1234- (UIViewController *)childViewControllerForStatusBarStyle &#123; return self.topViewController;&#125; 4、在控制器view中随时更改状态栏颜色需要调用setNeedsStatusBarAppearanceUpdate方法，这个方法会通知系统调用当前控制器的preferredStatusBarStyle方法，然后在该方法里根据情况来返回不同状态就行了。 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>状态栏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac 常用命令]]></title>
    <url>%2F2018%2F06%2F15%2FMac-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[1.查看/关闭隐藏文件 shift+command+.]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[苹果开发者账号申请]]></title>
    <url>%2F2018%2F05%2F14%2F%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E7%94%B3%E8%AF%B7%2F</url>
    <content type="text"><![CDATA[之前做项目，帮别人申请过一次，但是，后来需要再申请的时候，步骤都忘光了，虽然这种东西不经常申请，但还是记录一下申请全过程吧。这个是一边申请一边写的。 准备资料：1、开发者账号 邮箱账号和密码（需要接收一条验证码）2、一个没有绑定过其他AppleID的手机号（需要接收一条验证码）3、公司名字，街道信息，城市，省/直辖市，邮编，公司电话（邓白氏）4、法人姓名，电话，邮箱（邓白氏）5、公司清晰的营业执照正本（或副本）照片（不要提供扫描件，直接原件照片），拍完照的营业执照，保证扫描左下方二维码可以扫到工商信息6、公司公章刻字面的实体照片（拿着公章，把刻字那一面拍照）7、企业类型8、是否是独立企业（公司有无分公司或办事处，只需填有或无）9、公司英文简称或英文商标（如果没有可以填无）10、主营业务（一个最主要的业务）11、员工人数（尽量精确，例10人，不要填区间）12、苹果联系人（就是公司项目负责人）的姓名、性别、职务、电话（公司座机和联系人手机，座机和办公地址保持一致）13、公司主页网站14、公司税号（选填） 开始申请：开发者账号申请链接 传送门 点击传送门来到了这个界面 到这里有AppleID就登录（略过中间几步），没有就去申请一个。申请好了之后首次登录出现下个界面点击submit来到下图以前是没有这一步的，可能是因为苹果开发者协议更新了，需要先验证手机号，点击红框中的任何一个继续点击需要输入密保问题答案继续 然后去开发者中心登录刚申请的AppleID进入重复之前的步骤，一直进到下面的界面根据个人需要选择相应的实体类型，界面的语言可以在之前绑定手机号的时候修改，我选的是简体中文，所以我的界面显示的都是汉语，先别急着继续，看下面有个D-U-N-S编号，点击后面的立即确认或Check Now进入法人实体名称需要填写公司的英文名称哈，提交完之后会提示未找到您的组织，然后再提交到这里光等着邮件吧，大概两到三天的时间吧，会收到邮件的，等待中…(5月14号提交的，5月16号收到的邮件，需要回复邮件，回复信息如下图)邮件已经回复了，继续等…果然，邮件上说最晚5月21号完成，我在5月21下午4点多的时候收到了回复，并且还帮我纠正的一点错误然后我就认真的继续等待，说好的 1-2 个工作日会发到我的邮箱里，大概是因为某种神秘的力量导致了邮件发送过程中抛锚了，迟迟等待了四天还没收到回复，在5月25号，我终于忍不住回复了一封邮件，问了一下情况半个小时后我就收到了回复，邓白氏码居然发过来了，赶紧重新登录开发者账号，继续未完成的大业 （图一）（图二）点击提交（submit）成功！激不激动，惊不惊喜，意不意外！还没完，等待苹果那边回复电话确认，确认过眼神(这个梗来源于抖音)之后，大结局付款！剧终！ 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>开发者账号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[appStore上架问题集]]></title>
    <url>%2F2018%2F05%2F04%2FappStore%E4%B8%8A%E6%9E%B6%E9%97%AE%E9%A2%98%E9%9B%86%2F</url>
    <content type="text"><![CDATA[不必太纠结于当下，也不必太忧虑未来，当你经历过一些事情的时候，眼前的风景已经和从前不一样了。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——村上村树《1Q84》 app每次上架过程就是一部血泪史，各种被拒，没看审核文档，一步一步踩着坑过来，其中还是有很多值得注意的地方的，将各种问题及解决办法收集起来汇成一部宝典，伴随自己成长。 Guideline 2.1 - Information Needed 12345678910111213141516171819We have started the review of your app, but we are not able to continue because we need access to a video that demonstrates the location feature while your app is running on the background.Please ensure the video you provide shows a physical iOS device (not a simulator).Next StepsTo help us proceed with the review of your app, please provide us with a link to a demo video in the App Review Information section of iTunes Connect and reply to this message in Resolution Center.To provide a link to a demo video:- Log in to iTunes Connect- Click on &quot;My Apps&quot;- Select your app- Click on the app version on the left side of the screen- Scroll down to &quot;App Review Information&quot;- Provide demo video access details in the &quot;Notes&quot; section- Once you&apos;ve completed all changes, click the &quot;Save&quot; button at the top of the Version Information page.If your iTunes Connect status shows as Metadata Rejected, we do not require a new binary to correct this issue. Please reply to this message in Resolution Center to confirm the availability of a valid demo video, and we will continue with the review. 问题原因：App -&gt; TARGETS -&gt; Capabilities -&gt; Background Modes 中勾选了 Location updates 问题解决： 需要给苹果审核团队提供一个视频，我们App中是跑步需要这个功能，然后我就拿着两部手机出去跑了一圈，一个手机用来录视频，一个手机运行App，然后把视频放到了优酷视频上，给审核团队提供了一个视频链接； 在 iTunes Connect 我的App -&gt; 待审核或可供销售 -&gt; App描述中加上一个提示语 持续运行GPS在后台可能会降低您的电池续航时间。最后完美通过。 Guideline 2.3.3 - Performance - Accurate Metadata 12345678910111213141516171819We noticed that your screenshots do not sufficiently reflect your app in use.Please see attached screenshots.Next StepsTo resolve this issue, please revise your screenshots to ensure that they accurately reflect the app in use on the supported devices. For iPhone, you need a set of 5.5-inch display screenshots and for iPad, you need a set for 12.9-inch display. This set will be scaled appropriately down to other device sizes when viewed on the App Store in each territory.Note that 5.8-inch display assets for iPhone X are optional and don&apos;t scale down to other devices sizes. Screenshots that include iPhone X layout features like rounded corners or sensor housing should only be used for the 5.8-inch display. ResourcesFor resources on creating great screenshots for the App Store, you may want to review the App Store Product Page information available on the Apple developer portal.Please ensure you have made any screenshot modifications using Media Manager. You should confirm your app looks and behaves identically in all languages and on all supported devices. Learn how to use Media Manager to add custom screenshots for each display size and localization.Since your App Store Connect status is Rejected, a new binary will be required. Make the desired metadata changes when you upload the new binary.NOTE: Please be sure to make any metadata changes to all app localizations by selecting each specific localization and making appropriate changes. 问题原因：我们App Store上传的预览图是用iPhone X截屏的，本来应该是5.8英寸的，结果UI给做成了5.5英寸的，也就是说，尺寸是5.5英寸的，但预览图截屏是iPhone X的，不对应。 问题解决：iPhone X截屏上传到5.8英寸的预览图中，iPhone Plus截屏上传到5.5英寸的预览图中，不能把iPhone X截屏处理成5.5英寸的。 Guideline 2.3.6 - Performance - Accurate Metadata 12345678910111213141516The rating you have selected, 4+, is inconsistent with the content of your app. Since your app includes contests, sweepstakes, real money gambling, or real money betting, you must select &quot;Yes&quot; for Gambling and Contests in App Store Connect.Next StepsTo resolve this issue, please update your Rating selections in App Store Connect.- Log in to App Store Connect- Click on &quot;My Apps&quot;- Select your app- Scroll down to select a Rating on the App Details page- Click the Edit button next to &quot;Rating&quot;- Select &quot;Yes&quot; for Gambling and Contests- Click &quot;Done&quot;- Once you&apos;ve completed all changes, click the &quot;Save&quot; button at the top of the App Version Information page.Note: Apps must be rated accordingly for the highest level of content that the user is able to access in the app. 问题原因：项目中接入了抽奖 问题解决：在app分级中，“赌博与竞赛”选项选择是，此时年龄会自动设为17+岁。 Guideline 2.4.1 - Performance - Hardware Compatibility 1234567891011We noticed that your app did not run or display as expected when viewed on iPad running iOS 11.4. Please see attached screenshots for details. Next StepsTo resolve this issue, please revise your app to ensure it runs as expected and displays properly at iPhone resolution on iPad. Even if your app was developed specifically for iPhone, users should still be able to use your app on iPad. ResourcesFor information on iOS device screen sizes and resolutions, please review the iOS Human Interface Guidelines as well as Points versus Pixels in the View Programming Guide for iOS. You may also want to view Size Classes and Core Components and Default Class Sizes for Different Devices for more information about designing apps for multiple screen sizes 问题原因：我们的登录页面在iPad上不能正常登录，因为没有登录按钮，上架前先用iPad运行一下，看看能不能正常登录，这种连登录都没通过的被拒，感觉好气呀，但还是要保持微笑。 问题解决：单独适配或底部放一个scrollViewview。 Guideline 2.5.1 - Performance - Software Requirements 123456789Your app uses the &quot;prefs:root=&quot; non-public URL scheme, which is a private entity. The use of non-public APIs is not permitted on the App Store because it can lead to a poor user experience should these APIs change.Continuing to use or conceal non-public APIs in future submissions of this app may result in the termination of your Apple Developer account, as well as removal of all associated apps from the App Store.Next StepsTo resolve this issue, please revise your app to provide the associated functionality using public APIs or remove the functionality using the &quot;prefs:root&quot; or &quot;App-Prefs:root&quot; URL scheme.If there are no alternatives for providing the functionality your app requires, you can file an enhancement request. 问题原因：App跳转系统设置界面使用了[[UIApplication sharedApplication]openURL:[NSURL URLWithString:@”App-Prefs:root=LOCATION”] options:@{} completionHandler:nil] 解决：将上述代码换成[[UIApplication sharedApplication] openURL:[NSURL URLWithString:UIApplicationOpenSettingsURLString]]即可。 Guideline 4.2.1 - Design - Minimum Functionality 1234567Your app uses the HealthKit APIs but does not indicate integration with the Health app in your app description and clearly identify the HealthKit and CareKit functionality in your app&apos;s user interface.Next StepsTo resolve this issue, please revise your app description to specify that your app integrates with the Health app.To resolve this issue, please clearly identify the HealthKit functionality in app&apos;s user interface to avoid confusion. Guideline 5.1.1 - Legal - Privacy - Data Collection and Storage 12345Your app uses the HealthKit frameworks but does not include the required privacy policy.Next StepsTo resolve this issue, please update your app metadata to include a privacy policy URL and ensure that the URL you provide directs the user to your privacy policy. 问题原因：我们的app中使用到了 HealthKit ，读取用户的步数； 问题解决： 在app info.plist文件中加入两个key Privacy - Health Share Usage DescriptionAPPName需要您的同意才能访问您的健康，若不同意，则无法读取您的健康数据。 Privacy - Motion Usage DescriptionAPPName需要您的同意才能访问您的运动与健康，若不同意，则无法使用您的健康与运动数据。 在 iTunes Connect 我的App -&gt; App信息 中有个隐私政策网址(URL) 这里面需要填写一个URL，就是和登录或注册界面的用户协议那个URL一样的； 在 iTunes Connect 我的App -&gt; 待审核或可供销售 -&gt; App描述中加上一个提示语“appName“已接入HealthKit，可同步训练数据到”个人“步数，授权 Apple Health 可一键同步运动数据。 Guideline 5.3.2 - Legal - Gaming, Gambling, and Lotteries 12345678910111213Your app includes a contest or sweepstakes but it does not:- Include official rules for the sweepstake within the app, which is required.- Indicate that Apple is not involved in any way with the contest or sweepstakes.- Enforce an app age rating of 17+.Next StepsIt is necessary to:- Include official rules of the contest or sweepstakes in the app- Include an explicit statement in the contest or sweepstakes rules specifying that Apple is not a sponsor.- Enforce an age rating of 17+. 问题原因：App中有抽奖功能 问题解决：在抽奖规则和抽奖页面添加*奖品与活动和设备生产商Apple Inc.公司无关。然后在用户协议中添加通过本软件参加的任何商业活动或者奖励活动，由本公司提供，均与Apple Inc.无关。 持续更新… 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>app Store上架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基金易混概念知识总结]]></title>
    <url>%2F2017%2F09%2F13%2F%E5%9F%BA%E9%87%91%E6%98%93%E6%B7%B7%E6%A6%82%E5%BF%B5%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[第五章 基金职业道德1、道德与法律的区别 表现形式不同； 内容结构不同； 调整范围不同； 调整手段不同。 2、道德与法律的联系 目的一致； 内容交叉； 功能互补，道德在调整范围上对法律有补充作用； 相互促进。 3、职业道德的特征 特殊性； 继承性； 规范性； 具体性。 4、基金职业道德主要包括 守法合规；（最为基础），调整的是基金从业人员与基金行业及基金监管的关系。 客户至上；调整基金从业人员和投资人之间的关系，基本要求：客户利益优先；公平对待客户。 诚实守信；（核心规范） 忠诚尽责；调整基金从业人员和其所在机构之间的关系，基本要求：廉洁公正；忠诚敬业。 专业审慎；调整基金从业人员和职业之间的关系。基本要求：持证上岗；持续学习；审慎开展职业活动。 保守秘密。（法定义务）包括商业秘密；客户资料；内幕信息。 5、基金职业道德教育 途径： 岗前职业道德教育； 岗位职业道德教育； 基金业协会的自律； 树立基金职业道德典型； 社会各界持续监督。 6、基金职业道德修养 方法： 正确树立基金职业道德观念； 深刻领会基金职业道德规范； 积极参加基金职业道德实践。 基金管理人1、主要职责： 募集基金，办理基金份额的发售和登记事宜； 办理基金备案手续； 对不同的基金财产分别管理、分别记账； 确定基金收益分配方案，及时向基金份额持有人分配收益； 进行基金会计核算并编制基金财务会计报告，编制中期和年度基金报告； 计算并公告基金资产净值，确定基金份额申购、赎回价格； 办理信息披露事项； 召集基金份额持有人大会； 保存基金财产管理业务活动的记录、账册、报表和其他相关资料； 以基金管理人名义，代表基金份额持有人利益行使诉讼权利或实施其他法律行为。 基金托管人1、主要职责： 安全保管基金财产； 开设资金账户和证券账户； 对不同基金财产分别设置账户； 根据管理人指令，及时办理清算、交割事宜； 召集基金份额持有人大会； 信息披露； 复核净值和申购价格； 监督管理人的基金投资运作； 资料保存； 对基金财务会计报告，中期和年度报告出具意见。 中国证监会1、中国证监会对以下基金服务机构实行注册管理 基金销售机构； 基金份额登记机构； 基金估值核算机构； 2、中国证监会对以下基金服务机构实行备案管理 基金投资顾问机构； 基金评价机构； 基金信息技术系统服务机构； 文件1、注册公募基金需要提交下列文件: 申请报告； 基金合同草案； 基金托管协议草案； 招募说明书草案； 律师事务所出具的法律意见书； 其他文件。 证监会应在6个月内进行审核 时间1、公募基金 注册公募基金提交的文件，证监会应在6个月内进行审核； 管理人应在份额发售3日前公布招募说明书、基金合同和其他文件； 募集期限：6个月 基金募集期限届满，基金管理人10日内聘请验资机构验资，自收到验资报告之日起10日内，向证监会提交验资报告，证监会收到3日内书面确认，管理人收到确认后，次日发布生效公告，办理基金备案手续。 募集基金失败，基金管理人以固有财产承担债务和费用，在募集期满后30日内返还款项，并加计银行同期存款利息。 2、私募基金 基金业协会应在材料齐备后的20个工作日，通过网站公告其基本情况，为私募基金管理人办理登记手续。 发生重大事项的，应在10个工作日内向基金业协会报告。 基金管理人每个会计年度结束后的4个月内，向基金业协会报送年报和年度投资运作情况资料，保存不得少于10年。 披露1、基金信息披露 基金招募说明书、基金合同、基金托管协议； 基金资产净值、基金份额净值； 基金份额申购、赎回价格； 资产组合季度报告、财务会计报告及中期和年度基金报告； 临时报告； 基金份额持有人大会决议； 重大人事变动； 诉讼或仲裁。 2、基金信息披露的作用 有利于投资者的价值判断； 有利于防止利益冲突和利益输送，改变投资者信息弱势地位，增加市场透明度； 有利于提高证券市场效率； 有效防止信息滥用。 3、基金信息披露原则 披露内容方面：真实性（最根本、最重要）、准确性、完整性、及时性、公平披露。 披露形式方面：规范性、易解性、易得性。 4、管理人的基金信息披露义务 发售3日前，招募说明书和基金合同摘要； 合同生效的次日，合同生效公告（网站披露）； 开放式基金合同生效后每6个月结束之日起45日内，登载更新的招募说明书，公告前15日提交证监会； 上市前3日，上市公告书在指定报刊和管理人网站； 封闭式：每周；开放式：开放申赎前每周，开放申赎后每日； 年度：90日内，半年度：60日内，季度：15个工作日内。披露后2工作日递交证监会备案； 重大影响：2日内临时报告书，有误导性影响，立即公开澄清； 召开持有人大会：提前30日公告； 管理人职责终止后：基金财产需审计报告并报证监会备案。 5、 法律1、2014年12月15日，基金业协会颁布了《基金从业人员职业行为自律准则》，引导全体从业人员合乎职业道德规范。 合规 基金管理人 基金托管人 ETF LOF 信息披露 总结 我国基金信息披露的规范性文件分为三类:基金信息披露内容与格式准则、基金信息 披露编报规则、基金信息披露 XBRL 模扳和相关标引规范。 根据《基金管理公司风险管理指引(试行)》,投资合规性风险管理主要措施包括: (1)建立有效的投资流程和投资授权制度。 (2)通过在交易系统中设置风险参数,对投资的合规风险进行自动控制,对于无法在交易 系统自动控制的投资合规限制,应通过加强手工监控、多人复核等措施予以控制。 (3)重点监控投资组合投资中是否存在内幕交易、利益输送和不公平对待不同投资者等行 为。 (4)对交易异常行为进行定义,并通过事后评估对基金经理、交易员和其他人员的交易行 为(包括交易价格、交易品种、交易对手、交易频度、交易时机等)进行监控,加强对异常 交易的跟踪、监测和分析。 (5)每日跟踪评估投资比例、投资范围等合规性指标执行情况,确保投资组合投资的合规 性指标符合法律法规和基金合同的规定。 (6)关注估值政策和估值方法隐含的风险,定期评估第三方估值服务机构的估值质量,对 于以摊余成本法估值的资产,应特别关注影子价格及两者的偏差带来的风险,进行情景压力 测式并及时制定风险管理情景应对方案。 中国证监会依法对基金管理公司提交的市场准入等行政许可事项进行审批,主要包括: 基金管理公司的设立审批、基金管理公司申请境内机构投资者资格审批、基金管理公司重大 事项变更审核、基金管理公司分支机构设立审核、基金管理公司股权处置监管等。 基金运作信息披露文件主要包括净值公告、季度报告、半年度报告、年度报告以及基 金上市交易公告书等。基金合同是募集期间的披露文件。 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>基金</category>
      </categories>
      <tags>
        <tag>基金基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS设置label的行间距+字间距+高度自适应]]></title>
    <url>%2F2017%2F09%2F07%2FiOS%E8%AE%BE%E7%BD%AElabel%E7%9A%84%E8%A1%8C%E9%97%B4%E8%B7%9D-%E5%AD%97%E9%97%B4%E8%B7%9D-%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%2F</url>
    <content type="text"><![CDATA[越有本事的人越没脾气。因为素质、修为、涵养、学识、能力和财力会综合一个人的品格。 将这些方法写在UILabel的分类中，方便调用。 1、设置行间距1234567891011121314//设置行间距- (void)setLineSpace:(CGFloat)lineSpcae withString:(NSString *)str&#123; if (lineSpcae &lt; 0.01 || !str) &#123; return; &#125; NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc]init]; paragraphStyle.lineSpacing = lineSpcae;//行间距 默认为0 paragraphStyle.lineBreakMode = NSLineBreakByWordWrapping; paragraphStyle.hyphenationFactor = 1;//连字符，换行的时候同一个单词用连字符连接 NSDictionary *dic = @&#123;NSParagraphStyleAttributeName:paragraphStyle&#125;; NSAttributedString *attributeStr = [[NSAttributedString alloc]initWithString:str attributes:dic]; self.attributedText = attributeStr;&#125; 2、设置字间距12345678910//设置字间距- (void)setWordLineSpace:(CGFloat)wordSpace withString:(NSString *)str&#123; if (wordSpace &lt; 0.01 || !str) &#123; return; &#125; NSDictionary *dic = @&#123;NSKernAttributeName:@(wordSpace)&#125;; NSAttributedString *attributeStr = [[NSAttributedString alloc]initWithString:str attributes:dic]; self.attributedText = attributeStr;&#125; 3、计算带行间距的文字长度 自适应高度123456789101112- (CGSize)sizeWithString:(NSString *)string withLineSpace:(CGFloat)lineSpace sizemake:(CGSize) withsize&#123; if (!string) &#123; return CGSizeZero; &#125; NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc]init]; paragraphStyle.lineSpacing = lineSpace; paragraphStyle.hyphenationFactor = 1.0; NSDictionary *dic = @&#123;NSParagraphStyleAttributeName:paragraphStyle,NSFontAttributeName:self.font&#125;; CGSize size = [string boundingRectWithSize:withsize options:NSStringDrawingTruncatesLastVisibleLine | NSStringDrawingUsesFontLeading | NSStringDrawingUsesLineFragmentOrigin attributes:dic context:nil].size; return size;&#125;]]></content>
      <categories>
        <category>iOS项目问题集</category>
      </categories>
      <tags>
        <tag>UILabel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基金基础知识总结]]></title>
    <url>%2F2017%2F08%2F31%2F%E5%9F%BA%E9%87%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[1、基金职业道德教育的途径1、岗前职业道德教育 2、岗位职业道德教育 3、基金业协会的自律 4、树立基金职业道德典型 5、社会各界持续监督 2、合规文化要求公司内部建立1、清晰的责任制 2、清晰的问责制 3、激励约束机制 3、保险资产管理公司的资产管理业务包括1、企业年金 2、保险资产管理计划 3、第三方保险资产管理计划 4、投资联结保险账户管理 4、基金合同特别约定的事项包括1、基金当事人的权利义务 2、基金持有人大会的召集、议事及表决的程序和规则 3、基金合同终止的事由、程序及基金财产的清算方式 5、基金管理人进行合规培训的具体内容包括1、与基金行业有关的法律法规 2、公司内部的员工守则和各项业务的合规制度 3、案例警示教育 6、基金的营销组合策略包括1、产品策略 2、分销策略 3、促销策略 4、人员策略 7、衍生金融工具包括1、远期合约 2、期货合约 3、期权合约 4、互换协议 8、政府基金监管较之基金行业自律、基金机构内控以及社会力量监督具有以下特征1、监管内容具有全面性 2、监管对象具有广泛性 3、监管时间具有连续性 4、监管主体及其权限具有法定性 5、监管活动具有强制性 9、基金管理人的合规审核程序包括1、制定合规审核机制 2、合规审核调查 3、合规审核评价 10、职业道德的作用包括1、调整职业关系 2、提升职业素质 3、促进行业发展 11、基金与银行储蓄存款有着本质的不同，主要表现在1、性质不同 2、收益与风险特性不同 3、信息披露程度不同 12、ETF的特点1、被动操作的指数型基金 2、独特的实物申购赎回机制 3、一级市场与二级市场共存的交易制度 ####### 13、金融市场的构成要素包括 1、市场参与者 2、金融工具 3、金融交易的组织方式 14、证券市场监管的原则包括1、依法监管原则 2、保护投资者原则 3、“三公”原则 4、监督与自律相结合原则 1、安全垫放大倍数增加，基金的风险和收益的变化情况为 风险增加，收益增加2、忠诚尽责要求基金从业人员在工作中要做到 廉洁公正，忠诚敬业3、分开募集的分级基金，以 子代码 进行申购和赎回。母基金代码 不能申购和赎回。4、分级基金的基础份额称为 母基金份额 ，预期风险收益较低的子份额称为 A类份额，预期风险收益较高的子份额称为 B类份额。5、基金管理人关于 ETF 基金份额参考净值的计算方式，一般需经 证券交易所 认可后公告。修改 ETF 基金份额参考净值的计算方式，也需经 证券交易所 认可后公告。6、基金监管的高效监管原则首先要求基金监管机构具有 权威性。7、货币市场基金、债券基金、混合基金、股票基金风险等级 由低到高。8、保本基金起源于 美国。9、保本基金的最大特点是其招募说明书中明确引入 保本保障机制。10、1990年，加拿大多伦多 证券交易所推出了世界上第一只 ETF 指数参与份额（TIPs）。11、证券投资基金在 美国 被称为 “共同基金”。在 英国和我国香港特别行政区 被称为 “单位信托基金”。在 欧洲 一些国家被称为 “集合投资基金”或“集合投资计划”。在 “日本和我国台湾地区” 被称为“证券投资信托基金”。12、基金评价机构从事公开募集基金评价业务并以公开形式发布基金评价结果的，应当向 基金业协会 申请注册。13、中国境内第一家较为规范的投资基金是 淄博基金。14、基金交易应实行 集中交易 制，基金经理不得直接向交易员下达投资指令或者直接进行交易。15、注册登记机构将确认后的申购、赎回数据信息下发至各代销机构，同时也将登记数据发送至 基金托管人。16、证券业协会性质上是 自律性组织。17、开放式基金的申购和赎回可以通过 基金管理人的直销中心 与 基金销售代理人的代销网点 进行。 1、QDII基金的净值在估值日后 1~2个工作日 内披露。2、基金托管人职责终止的，基金份额持有人大会应当在 6个月 内选任新基金托管人。3、督察长应当 定期或不定期 向全体董事报送工作报告。4、基金管理人监事会 每年 至少召开一次会议，监事会决议至少须经 1/2 以上监事投票通过。5、南方保本基金的保本周期为 3 年。6、基金募集失败时，基金管理人在募集期限届满后 30 日内返还投资者已缴纳的款项，并加计银行同期存款利息。7、我国目前基金申购款，一般在 T+2 日到达基金的银行存款账户。赎回款一般于 T+3 日从基金的银行存款账户划出。8、封闭式基金的报价单位为每份基金价格。基金的申报价格最小变动单位为 0.001元 人民币，基金单笔最大数量应低于 100万 份。9、基金销售机构应监测客户现金收支或款项划转情况，对符合大额交易标准的，在该大额交易发生后 5个工作日 内，向中国反洗钱监测分析中心报告。在发现有可疑交易或者行为时，在其发生后 10个工作日 内，向中国反洗钱监测分析中心报告。10、开放式基金连续发生巨额赎回时，已经接受的赎回申请可以延缓支付赎回款项，但延缓期限不得超过 20个工作日。11、ETF在一级市场上，通常只有基金份额达到 30万份 以上的投资者在交易时间内可以随时进行申购和赎回的交易。12、根据相关法规，基金年度报告应由 2/3以上 独立董事签字同意。13、我国开放式基金首次募集的募集期限为自该基金份额发售之日起 3个月 内。14、基金管理人应当自收到投资者的申购(认购)、赎回申请之 日起 3个工作日 内,对该申购(认购)、赎回申请的有效性进行确认。 1、XBRL : 可扩展商业报告语言2、QFII ：合格的境外机构投资者3、LOF ：上市开放式基金4、ETF ：交易型开放式指数基金 公式1：折（溢）价率 = （二级市场价格-基金份额净值）/ 基金份额净值100%公式2：净申购金额 = 申购金额 / （1+申购费率）公式3：申购费用 = 净申购金额 申购费率公式4：申购份额 = 净申购金额 / 申购当日份额净值 1、某投资人投资 1 万元认购基金,认购金额在募集期产生的利息为 3 元,其对应的认购率 为 1.2%,基金份额面值为 1 元,则其认购费用为( )元,认购份额为( )份。 A、150.24,12520B、118.58,9884.39C、115,9586.33D、118.58,9881.42 答案：B解析:净申购金额=申购金额/(1+申购费率)=10000/(1+1.2%)=9881.42 元;申购费用= 净申购金额申购费率=9881.421.2%=118.58 份;利率=3/10000=0.0003;申购当日基金份额 净值=1/(1+0.0003)=0.9997 元;申购份额=净申购金额/申购当日份额净值 =9881.42/0.9997=9884.39 元。 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>基金</category>
      </categories>
      <tags>
        <tag>基金基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS工具类，常用方法]]></title>
    <url>%2F2017%2F08%2F25%2FiOS%E5%B7%A5%E5%85%B7%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[自我成长与提升重在平常的总结和积累 开场装了个小比，下面开始正题 1、判断字符串是否为空123456789101112131415+ (BOOL)isEmpty:(NSString *)str&#123; if (!str) &#123; return YES; &#125;else &#123; //去空格 NSCharacterSet *set = [NSCharacterSet whitespaceAndNewlineCharacterSet]; NSString *trimedString = [str stringByTrimmingCharactersInSet:set]; if ([trimedString length] == 0) &#123; return YES; &#125; else &#123; return NO; &#125; &#125;&#125; 2、对象万能判空12345678+ (BOOL)isNull:(id)obj&#123; if ([obj isKindOfClass:[NSString class]]) &#123; return obj == nil || [obj isEqual:[NSNull null]] || [obj isEqualToString:@&quot;&lt;null&gt;&quot;] || [self isEmpty:obj]; &#125;else &#123; return obj == nil || [obj isEqual:[NSNull null]]; &#125;&#125; 3、判断是否是手机号123456+ (BOOL)isPhoneNum:(NSString *)mobileNum&#123; NSString *MOBILE = @&quot;^1(3[0-9]|4[57]|5[0-35-9]|8[0-9]|7[0678])\\d&#123;8&#125;$&quot;; NSPredicate *regextestmobile = [NSPredicate predicateWithFormat:@&quot;SELF MATCHES %@&quot;, MOBILE]; return [regextestmobile evaluateWithObject:mobileNum];&#125; 4、精确的判断身份证号码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192+ (BOOL)accurateVerifyIDCardNumber:(NSString *)value&#123; value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]; int length =0; if (!value) &#123; return NO; &#125;else &#123; length = (int)value.length; if (length !=15 &amp;&amp; length !=18) &#123; return NO; &#125; &#125; // 省份代码 NSArray *areasArray =@[@&quot;11&quot;,@&quot;12&quot;, @&quot;13&quot;,@&quot;14&quot;, @&quot;15&quot;,@&quot;21&quot;, @&quot;22&quot;,@&quot;23&quot;, @&quot;31&quot;,@&quot;32&quot;, @&quot;33&quot;,@&quot;34&quot;, @&quot;35&quot;,@&quot;36&quot;, @&quot;37&quot;,@&quot;41&quot;, @&quot;42&quot;,@&quot;43&quot;, @&quot;44&quot;,@&quot;45&quot;, @&quot;46&quot;,@&quot;50&quot;, @&quot;51&quot;,@&quot;52&quot;, @&quot;53&quot;,@&quot;54&quot;, @&quot;61&quot;,@&quot;62&quot;, @&quot;63&quot;,@&quot;64&quot;, @&quot;65&quot;,@&quot;71&quot;, @&quot;81&quot;,@&quot;82&quot;, @&quot;91&quot;]; NSString *valueStart2 = [value substringToIndex:2]; BOOL areaFlag =NO; for (NSString *areaCode in areasArray) &#123; if ([areaCode isEqualToString:valueStart2]) &#123; areaFlag =YES; break; &#125; &#125; if (!areaFlag) &#123; return false; &#125; NSRegularExpression *regularExpression; NSUInteger numberofMatch; int year =0; switch (length) &#123; case 15: year = [value substringWithRange:NSMakeRange(6,2)].intValue +1900; if (year %4 ==0 || (year %100 ==0 &amp;&amp; year %4 ==0)) &#123; regularExpression = [[NSRegularExpression alloc] initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;$&quot; options:NSRegularExpressionCaseInsensitive error:nil];//测试出生日期的合法性 &#125;else &#123; regularExpression = [[NSRegularExpression alloc]initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;$&quot; options:NSRegularExpressionCaseInsensitive error:nil];//测试出生日期的合法性 &#125; numberofMatch = [regularExpression numberOfMatchesInString:value options:NSMatchingReportProgress range:NSMakeRange(0, value.length)]; if(numberofMatch &gt;0) &#123; return YES; &#125;else &#123; return NO; &#125; case 18: year = [value substringWithRange:NSMakeRange(6,4)].intValue; if (year %4 ==0 || (year %100 ==0 &amp;&amp; year %4 ==0)) &#123; regularExpression = [[NSRegularExpression alloc] initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;19[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]&#123;3&#125;[0-9Xx]$&quot; options:NSRegularExpressionCaseInsensitive error:nil];//测试出生日期的合法性 &#125;else &#123; regularExpression = [[NSRegularExpression alloc] initWithPattern:@&quot;^[1-9][0-9]&#123;5&#125;19[0-9]&#123;2&#125;((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]&#123;3&#125;[0-9Xx]$&quot; options:NSRegularExpressionCaseInsensitive error:nil];//测试出生日期的合法性 &#125; numberofMatch = [regularExpression numberOfMatchesInString:value options:NSMatchingReportProgress range:NSMakeRange(0, value.length)]; if(numberofMatch &gt;0) &#123; int S = ([value substringWithRange:NSMakeRange(0,1)].intValue + [value substringWithRange:NSMakeRange(10,1)].intValue) *7 + ([value substringWithRange:NSMakeRange(1,1)].intValue + [value substringWithRange:NSMakeRange(11,1)].intValue) *9 + ([value substringWithRange:NSMakeRange(2,1)].intValue + [value substringWithRange:NSMakeRange(12,1)].intValue) *10 + ([value substringWithRange:NSMakeRange(3,1)].intValue + [value substringWithRange:NSMakeRange(13,1)].intValue) *5 + ([value substringWithRange:NSMakeRange(4,1)].intValue + [value substringWithRange:NSMakeRange(14,1)].intValue) *8 + ([value substringWithRange:NSMakeRange(5,1)].intValue + [value substringWithRange:NSMakeRange(15,1)].intValue) *4 + ([value substringWithRange:NSMakeRange(6,1)].intValue + [value substringWithRange:NSMakeRange(16,1)].intValue) *2 + [value substringWithRange:NSMakeRange(7,1)].intValue *1 + [value substringWithRange:NSMakeRange(8,1)].intValue *6 + [value substringWithRange:NSMakeRange(9,1)].intValue *3; int Y = S %11; NSString *M =@&quot;F&quot;; NSString *JYM =@&quot;10X98765432&quot;; M = [JYM substringWithRange:NSMakeRange(Y,1)];// 判断校验位 if ([M isEqualToString:[value substringWithRange:NSMakeRange(17,1)]]) &#123; return YES;// 检测ID的校验位 &#125;else &#123; return NO; &#125; &#125;else &#123; return NO; &#125; default: return NO; &#125;&#125; 5、获取当前VC1234567891011121314151617+ (UIViewController *)getVisibleVcFrom:(UIViewController*)vc &#123; if ([vc isKindOfClass:[UINavigationController class]]) &#123; return [self getVisibleVcFrom:[((UINavigationController*) vc) visibleViewController]]; &#125;else if ([vc isKindOfClass:[UITabBarController class]])&#123; return [self getVisibleVcFrom:[((UITabBarController*) vc) selectedViewController]]; &#125; else &#123; if (vc.presentedViewController) &#123; return [self getVisibleVcFrom:vc.presentedViewController]; &#125; else &#123; return vc; &#125; &#125;&#125;+ (UIViewController *)getCurrentVC&#123; [self getVisibleVcFrom:(UIViewController *)appDelegate.window.rootViewController]];&#125; 6、打电话12345+ (void)dialPhone:(NSString *)phoneNum&#123; NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@&quot;telprompt://%@&quot;,phoneNum]]; [[UIApplication sharedApplication] openURL:url];&#125; 时间相关的常用方法 1、获取当前时间戳1234567+ (NSString *)getCurrentTimeStamp&#123; NSDate *dat = [NSDate dateWithTimeIntervalSinceNow:0]; NSTimeInterval interval = [dat timeIntervalSince1970]; NSString *timeStamp = [NSString stringWithFormat:@&quot;%0.f&quot;,interval]; return timeStamp;&#125; 2、与当前时间比较：显示 昨天、今天、刚刚12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849+ (NSString *)dateFormat:(NSString *)dateString&#123; @try &#123; NSString *targetDateStr = [self timeStamp:dateString format:@&quot;yyyy年MM月dd日 HH:mm:ss&quot;]; NSDateFormatter *dateFormatter = [[NSDateFormatter alloc]init]; [dateFormatter setDateFormat:@&quot;yyyy年MM月dd日 HH:mm:ss&quot;]; NSDate *nowDate = [NSDate date]; NSDate *targetDate = [dateFormatter dateFromString:targetDateStr]; //取当前时间和转换时间两个日期对象的时间间隔 NSTimeInterval time = [nowDate timeIntervalSinceDate:targetDate]; NSString *resultStr = [[NSString alloc] init]; if (time &lt;= 60) &#123;//1分钟以内 resultStr = @&quot;刚刚&quot;; &#125;else if (time &lt; 3600) &#123;//一个小时以内 resultStr = [NSString stringWithFormat:@&quot;%d分钟前&quot;,(int)time/60]; &#125;else if (time &lt;= 60*60*24) &#123;//在两天内 [dateFormatter setDateFormat:@&quot;yyyy年MM月dd日&quot;]; NSString *target_yMd = [dateFormatter stringFromDate:targetDate]; NSString *now_yMd = [dateFormatter stringFromDate:nowDate]; [dateFormatter setDateFormat:@&quot;HH:mm&quot;]; if ([target_yMd isEqualToString:now_yMd]) &#123; //同一天 resultStr = [NSString stringWithFormat:@&quot;今天 %@&quot;,[dateFormatter stringFromDate:targetDate]]; &#125;else &#123; //昨天 resultStr = [NSString stringWithFormat:@&quot;昨天 %@&quot;,[dateFormatter stringFromDate:targetDate]]; &#125; &#125;else &#123; [dateFormatter setDateFormat:@&quot;yyyy&quot;]; NSString *target_y = [dateFormatter stringFromDate:targetDate]; NSString *now_y = [dateFormatter stringFromDate:nowDate]; if ([target_y isEqualToString:now_y]) &#123; //同一年 [dateFormatter setDateFormat:@&quot;MM月dd日&quot;]; resultStr = [dateFormatter stringFromDate:targetDate]; &#125;else &#123; [dateFormatter setDateFormat:@&quot;yyyy年MM月dd日&quot;]; resultStr = [dateFormatter stringFromDate:targetDate]; &#125; &#125; return resultStr; &#125; @catch (NSException *exception) &#123; return @&quot;&quot;; &#125; @finally &#123; &#125;&#125; 3、判断某个时间是否在一天中的某个时间段内12345678910111213141516171819202122232425262728293031323334353637+ (BOOL)isBetweenFromHour:(NSInteger)fromHour toHour:(NSInteger)toHour&#123; NSDate *date8 = [self getCustomDateWithHour:fromHour]; NSDate *date23 = [self getCustomDateWithHour:toHour]; NSDate *currentDate = [NSDate date]; if ([currentDate compare:date8]==NSOrderedDescending &amp;&amp; [currentDate compare:date23]==NSOrderedAscending) &#123; NSLog(@&quot;该时间在 %d:00-%d:00 之间！&quot;, (int)fromHour, (int)toHour); return YES; &#125; return NO;&#125; //生成当天的某个点,如hour为“8”，就是上午8:00（本地时间）+ (NSDate *)getCustomDateWithHour:(NSInteger)hour&#123; //获取当前时间 NSDate *currentDate = [NSDate date]; NSCalendar *currentCalendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian]; NSDateComponents *currentComps = [[NSDateComponents alloc] init]; NSInteger unitFlags = NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay | NSCalendarUnitWeekday | NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond; currentComps = [currentCalendar components:unitFlags fromDate:currentDate]; //设置当天的某个点 NSDateComponents *resultComps = [[NSDateComponents alloc] init]; [resultComps setYear:[currentComps year]]; [resultComps setMonth:[currentComps month]]; [resultComps setDay:[currentComps day]]; [resultComps setHour:hour]; NSCalendar *resultCalendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian]; return [resultCalendar dateFromComponents:resultComps];&#125; 4、RAC实现的倒计时123456789+ (RACSignal *)timerCountdown:(int)times&#123; RACSignal *timer = [RACSignal interval:1 onScheduler:[RACScheduler mainThreadScheduler]]; return [[[timer scanWithStart:@(times) reduce:^id(NSNumber *running, id _) &#123; return @(running.intValue - 1); &#125;]takeUntilBlock:^BOOL(NSNumber *x) &#123; return x.intValue &lt; 0; &#125;]takeUntil:self.rac_willDeallocSignal];&#125; 5、RAC实现的正计时123456789+ (RACSignal *)timerPositive:(int)times withStartTime:(NSTimeInterval)startTime&#123; RACSignal *timer = [RACSignal interval:1 onScheduler:[RACScheduler mainThreadScheduler]]; return [[[timer scanWithStart:@(startTime) reduce:^id(NSNumber *running, id _) &#123; return @(running.intValue + 1); &#125;]takeUntilBlock:^BOOL(NSNumber *x) &#123; return x.intValue &gt; times; &#125;]takeUntil:self.rac_willDeallocSignal];&#125; 6、RAC实现的每隔多长时间执行一次1234567891011+ (RACSignal *)handleInterval:(int)time&#123; @WeakObj(self); [[[[RACSignal interval:time onScheduler:[RACScheduler mainThreadScheduler]] takeUntilBlock:^BOOL(id x) &#123; @StrongObj(self); return 表达式;//为YES时停止 &#125;]takeUntil:self.rac_willDeallocSignal] subscribeNext:^(id x) &#123; @StrongObj(self); //你自己的操作（每隔time秒执行一次） &#125;];&#125; 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>iOS项目问题集</category>
      </categories>
      <tags>
        <tag>iOS工具类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS10权限访问适配]]></title>
    <url>%2F2017%2F08%2F25%2FiOS10%E6%9D%83%E9%99%90%E8%AE%BF%E9%97%AE%E9%80%82%E9%85%8D%2F</url>
    <content type="text"><![CDATA[iOS10访问权限适配iOS10调用相机、访问通讯录、相册等都要在plist中加入权限访问描述，不然项目会直接crash。 iOS10常用权限许可设置 相机权限： Privacy - Camera Usage Description 是否允许此App使用你的相机？ 相册权限： Privacy - Photo Library Usage Description 是否允许此App访问你的媒体资料库？ 通讯录权限： Privacy - Contacts Usage Description 是否允许此App访问你的通讯录？ 蓝牙权限：Privacy - Bluetooth Peripheral Usage Description 是否许允此App使用蓝牙？ 持续定位权限： Privacy - Location Always Usage Description 是否允许此App持续使用定位服务？ 定位权限：Privacy - Location When In Use Usage Description 是否允许此App使用定位服务？ 语音转文字权限：Privacy - Speech Recognition Usage Description 是否允许此App使用语音识别？ 日历权限：Privacy - Calendars Usage Description 是否允许此App使用日历？ 健康访问权限：Privacy - Health Share Usage Description 是否允许此App访问你的健康 健康写入权限：Privacy - Health Update Usage Description 是否允许此App写入健康数据 麦克风权限：Privacy - Microphone Usage Description 是否允许此App使用你的麦克风？ 运动与健身权限： Privacy - Motion Usage Description 是否允许此App访问您的运动与健身 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>iOS项目问题集</category>
      </categories>
      <tags>
        <tag>iOS10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本地项目上传到github]]></title>
    <url>%2F2017%2F08%2F25%2F%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0github%2F</url>
    <content type="text"><![CDATA[事情过程大概是这样发展的，我自己先写了个Demo，放在我本地，然后我为这个demo配了一篇博客，事后我想把本地这个项目放在github上托管，最后把这个过程记录下来，方便以后使用。 步骤1、首先在自己的 github 上新建一个仓库 repository，自己命名好即可步骤2、打开终端，进入本地项目目录步骤3、执行命令：git init。(该命令是在本地项目目录下初始化一个repository，成功后，会在本地项目目录下生成一个.git的隐藏文件)步骤4、执行命令：git add .。（命令后面有个点“.”，把本地项目目录下的所有文件加到本地暂存区中）步骤5、执行命令：git commit -m &quot;随便写点提交注释&quot;。(该命令会把本地暂存区中的文件提交到本地历史区，注意只有在本地历史区中的内容才能提交到github，执行该命令后，所有的文件都只是在本地，跟github还没有关系)步骤6、执行命令：git remote add origin https://github.com/自己的github username/项目名.git。（该命令是把本地历史区中的文件添加到github服务器的暂存区中，这一步是本地和远程服务器建立联系）步骤7、执行命令：git pull origin master。（每次提交之前要进行pull，这个命令可能不成功，提示fatal:refusing to merge unrelated histories,需要执行下面的命令：git pull origin master --allow-unrelated-histories）这一步之后可能会出现编辑界面，输入:wq回车退出编辑即可，到此为止本地项目目录中多了一个README.md文件，这个文件就是从github上pull下来的步骤8、执行命令：git push -u origin master。（这一步是真正向github提交，完事儿后本地和github上就同步了） 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS原生二维码扫码全屏预览(可设置扫描区域)]]></title>
    <url>%2F2017%2F08%2F07%2FiOS%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E7%A0%81%E5%85%A8%E5%B1%8F%E9%A2%84%E8%A7%88%E5%8F%AF%E8%AE%BE%E7%BD%AE%E6%89%AB%E6%8F%8F%E5%8C%BA%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[项目有4个功能，扫码、手电筒、相册识别二维码、生成二维码。为了方便几个功能都写一起了，下面分开实现，把我自己在项目中遇到的问题重点记录一下，代码demo中都有。 先上效果图片项目传送门 iOS10访问权限适配iOS10调用相机、访问通讯录、相册等都要在plist中加入权限访问描述，不然项目会直接crash。 项目中用到的12相机权限： Privacy - Camera Usage Description 是否允许此App使用你的相机？相册权限： Privacy - Photo Library Usage Description 是否允许此App访问你的媒体资 1、扫码头文件：#import &lt;AVFoundation/AVFoundation.h&gt;实现代理：AVCaptureMetadataOutputObjectsDelegate 主要属性：12345@property (strong, nonatomic) AVCaptureDevice *myDevice;//创建相机@property (strong, nonatomic) AVCaptureDeviceInput *deviceInput;//输入流@property (strong, nonatomic) AVCaptureMetadataOutput *metadataOutput;//媒体输出流@property (strong, nonatomic) AVCaptureSession *session;//捕捉会话@property (strong, nonatomic) AVCaptureVideoPreviewLayer *previewLayer;//视觉预览层 代码就不往上贴了，demo里都有，这里有两行代码着重记录一下123451.//设置扫描区域的大小 (这里要宽和高要颠倒一下，具体原因我特么也不清楚) 默认值（0，0，1，1）self.metadataOutput.rectOfInterest = CGRectMake((SCREEN_HEIGHT/2-64-CodeScanHeight/2)/SCREEN_HEIGHT, (SCREEN_WIDTH/2-CodeScanWidth/2)/SCREEN_WIDTH, CodeScanHeight/SCREEN_HEIGHT, CodeScanWidth/SCREEN_WIDTH); 2.//背景全屏预览self.previewLayer.frame = CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT); 中间那个扫描框搞的我也是醉醉的，刚开始直接设置的self.previewLayer.frame是扫描框的frame，但是背景就不能全屏预览了，所以还得使用rectOfInterest属性来限制扫描区域。 2、打开手电筒直接贴代码1234567891011121314151617- (void)openFlashLamp&#123; AVCaptureDevice *device = [AVCaptureDevice defaultDeviceWithMediaType:AVMediaTypeVideo]; if ([device hasTorch])//判断设备是否有摄像头，模拟器没有 &#123; //锁定系统摄像头 [device lockForConfiguration:nil]; if (device.torchMode == AVCaptureTorchModeOff) &#123; [device setTorchMode:AVCaptureTorchModeOn]; &#125;else &#123; [device setTorchMode:AVCaptureTorchModeOff]; &#125; //解除锁定 [device unlockForConfiguration]; &#125;&#125; 3、识别相册二维码实现代理UIImagePickerControllerDelegate,UINavigationControllerDelegate1.打开相册12345678- (void)openPhotoLibrary&#123; UIImagePickerController *picker = [[UIImagePickerController alloc]init]; picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary; picker.allowsEditing = YES; picker.delegate = self; [[self getCurrentVC] presentViewController:picker animated:YES completion:nil];&#125; 2.实现代理1234567891011121314151617#pragma mark UIImagePickerControllerDelegate- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker&#123; [[self getCurrentVC] dismissViewControllerAnimated:YES completion:nil];&#125;- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary&lt;NSString *,id&gt; *)info&#123; UIImage *img = info[UIImagePickerControllerEditedImage]; if (!img) &#123; img = info[UIImagePickerControllerOriginalImage]; &#125; @WeakObj(self); [[self getCurrentVC] dismissViewControllerAnimated:YES completion:^&#123; @StrongObj(self); [self readQRcodeImg:img]; &#125;];&#125; 3.识别相册二维码，读取二维码信息1234567891011121314151617181920- (void)readQRcodeImg:(UIImage *)img&#123; NSData *imgData = UIIamgeJPEGRepresentation(img, 1); CIContext *context = [CIContext contextWithOptions:@&#123;kCIContextUseSoftwareRenderer:@(true),kCIContextPriorityRequestLow:@(false)&#125;]; CIDetector *detector = [CIDetector detectorOfType:CIDetectorTypeQRCode context:context options:nil]; CIImage *image = [CIImage imageWithData:imgData]; NSArray *arr = [detector featuresInImage:image]; if (arr.count &gt;= 1) &#123; CIQRCodeFeature *feature = [arr firstObject]; //读取结果 if (self.delegateSubject) &#123; [self.delegateSubject sendNext:feature.messageString]; &#125; &#125;else &#123; UIAlertController *alter = [UIAlertController alertControllerWithTitle:@&quot;扫描结果&quot; message:@&quot;不是二维码图片&quot; preferredStyle:UIAlertControllerStyleAlert]; UIAlertAction *cancleAction = [UIAlertAction actionWithTitle:@&quot;确定&quot; style:UIAlertActionStyleCancel handler:nil]; [alter addAction:cancleAction]; [[self getCurrentVC] presentViewController:alter animated:YES completion:nil]; &#125;&#125; 4、生成二维码这个是用的一个别人写好的，挺不错的，可以自定义颜色和logo。一个方法调用就可生成，很方便。 到此结束，一把辛酸泪，好记性不如烂笔头。]]></content>
      <categories>
        <category>iOS项目问题集</category>
      </categories>
      <tags>
        <tag>二维码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS应用内跳转短信界面，导航栏无取消按钮的问题]]></title>
    <url>%2F2017%2F08%2F01%2F%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E5%86%85%E8%B7%B3%E8%BD%AC%E7%9F%AD%E4%BF%A1%E7%95%8C%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[应用内跳转短信头文件：#import &lt;MessageUI/MessageUI.h&gt;代理：&lt;MFMessageComposeViewControllerDelegate&gt; 跳转代码实现1234567891011//是否可以发送文本消息（模拟器不可以） if ([MFMessageComposeViewController canSendText]) &#123; MFMessageComposeViewController *vc = [[MFMessageComposeViewController alloc]init]; vc.recipients = @[phoneNum];//短信接收者---是个数组 vc.body = @&quot;&quot;;//短信内容 vc.messageComposeDelegate = self;// vc.navigationBar.tintColor = color_FF9210; [[GEToolUtil getCurrentVC] presentViewController:vc animated:YES completion:nil]; &#125;else &#123; NSLog(@&quot;设备不支持发送短信&quot;); &#125; 代理方法实现1234567891011121314151617181920#pragma mark- ====== MFMessageComposeViewControllerDelegate =======- (void)messageComposeViewController:(MFMessageComposeViewController *)controller didFinishWithResult:(MessageComposeResult)result&#123; //发送完信息就回到程序 [[GEToolUtil getCurrentVC] dismissViewControllerAnimated:YES completion:nil]; switch (result) &#123; case MessageComposeResultSent: [[HUDToolUtil singleton]showHUDMessage:@&quot;发送成功&quot;]; break; case MessageComposeResultFailed: [[HUDToolUtil singleton]showHUDMessage:@&quot;发送失败&quot;]; break; case MessageComposeResultCancelled: [[HUDToolUtil singleton]showHUDMessage:@&quot;取消发送&quot;]; break; default: break; &#125;&#125; 在 demo 中这样写，妥妥的可以，但是放到有些项目中短信界面的导航栏一片空白，没有取消按钮，无法返回自己的应用，出现这种情况看看自己的项目中是不是用了UINavigationController+FDFullscreenPopGesture这个第三方全屏滑动返回，如果用了的话进入这个类别.m文件添加一段代码：1234if ([self isKindOfClass:NSClassFromString(@&quot;MFMessageComposeViewController&quot;)]) &#123; [self fd_pushViewController:viewController animated:animated]; return; &#125; 这段代码添加位置1234567- (void)fd_pushViewController:(UIViewController *)viewController animated:(BOOL)animated&#123; if ([self isKindOfClass:NSClassFromString(@&quot;MFMessageComposeViewController&quot;)]) &#123; [self fd_pushViewController:viewController animated:animated]; return; &#125; if (![self.interactivePopGestureRecognizer.view.gestureRecognizers containsObject:self.fd_fullscreenPopGestureRecognizer]) &#123;...此处省略很多行代码 到此结束]]></content>
      <categories>
        <category>iOS项目问题集</category>
      </categories>
      <tags>
        <tag>短信</tag>
        <tag>导航栏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初来乍到Hexo]]></title>
    <url>%2F2017%2F06%2F21%2F%E5%88%9D%E6%9D%A5%E4%B9%8D%E5%88%B0%2F</url>
    <content type="text"><![CDATA[我叫司文彬，是一名多愁善感的程序猿，同事们都叫我司基猫，大概是由于我喜欢柯基并且还养了一只猫的缘故吧。50多公斤的小身板，却经常负荷许多忧虑和烦恼，又多半是自找的。我不善于向自己敬爱的人表述敬与爱，却善于向所憎恶的人表达憎与恶，然而胆子并不大。我常常否定自己，否定自己既痛苦又快乐，我就生活在这痛苦与快乐的交织网里，总也冲不出去。]]></content>
      <categories>
        <category>自我介绍</category>
      </categories>
      <tags>
        <tag>自我介绍</tag>
      </tags>
  </entry>
</search>
